Abstract factory – Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
Builder – Separate the construction of a complex object from its representation, allowing the same construction process to create various representations.
Dependency Injection	 – A class accepts the objects it requires from an injector instead of creating the objects directly.
Factory method – Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
Lazy initialization – Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed.
Multiton – Ensure a class has only named instances, and provide a global point of access to them.
Object pool – Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. 
Prototype – Specify the kinds of objects to create using a prototypical instance, and create new objects from the 'skeleton' of an existing object, thus boosting performance and keeping memory footprints to a minimum.
Resource acquisition is initialization (RAII) – Ensure that resources are properly released by tying them to the lifespan of suitable objects.
Singleton – Ensure a class has only one instance, and provide a global point of access to it.
Adapter – Convert the interface of a class into another interface clients expect. 
Bridge – Decouple an abstraction from its implementation allowing the two to vary independently.
Composite – Compose objects into tree structures to represent part-whole hierarchies.
Decorator – Attach additional responsibilities to an object dynamically keeping the same interface.
Extension object – Adding functionality to a hierarchy without changing the hierarchy.
Facade – Provide a unified interface to a set of interfaces in a subsystem.
Flyweight – Use sharing to support large numbers of similar objects efficiently.
Front controller – The pattern relates to the design of Web applications, it provides a centralized entry point for handling requests.
Marker	 – Empty interface to associate metadata with a class.
Module – Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.
Proxy – Provide a surrogate or placeholder for another object to control access to it.
Twin – Twin allows modeling of multiple inheritance in programming languages that do not support this feature.
Blackboard – Artificial intelligence pattern for combining disparate sources of data.
Chain of responsibility – Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. 
Command – Encapsulate a request as an object, thereby allowing for the parameterization of clients with different requests, and the queuing or logging of requests. It also allows for the support of undoable operations.
Interpreter – Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.
Iterator	 – Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
Mediator – Define an object that encapsulates how a set of objects interact. 
Memento – Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later.
Null object – Avoid null references by providing a default object.
Observer – Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.
Servant – Define common functionality for a group of classes, the servant pattern is also frequently called helper class or utility class implementation for a given set of classes.
Specification – Recombinable business logic in a Boolean fashion.
State – Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.
Strategy – Define a family of algorithms, encapsulate each one, and make them interchangeable.
Template method – Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.
Visitor – Represent an operation to be performed on instances of a set of classes. 
Active Object – Decouples method execution from method invocation that reside in their own thread of control.
Balking – Only execute an action on an object when the object is in a particular state.
Binding properties – Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way.
Compute kernel – The same calculation many times in parallel, differing by integer parameters used with non-branching pointer math into shared array.
Double-checked locking – Reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner.
Event-based asynchronou – Addresses problems with the asynchronous pattern that occur in multithreaded programs.
Guarded suspension – Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed.
Join – Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. 
Lock – One thread puts a "lock" on a resource, preventing other threads from accessing or modifying it.
Messaging design pattern (MDP) – Allows the interchange of information (i.e. messages) between components and applications.
Monitor object – An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.
Reactor – A reactor object provides an asynchronous interface to resources that must be handled synchronously.
Read-write lock – Allows concurrent read access to an object, but requires exclusive access for write operations.
Scheduler – Explicitly control when threads may execute single-threaded code.
Thread pool – A number of threads are created to perform a number of tasks, which are usually organized in a queue. 
Thread-specific storage – Static or "global" memory local to a thread.
Safe Concurrency with Exclusive Ownership – Avoiding the need for runtime concurrent mechanisms, because exclusive ownership can be proven. 
CPU atomic operation – x86 and other CPU architectures support a range of atomic instructions that guarantee memory safety for modifying and accessing primitive values (integers).
The Zero one infinity (ZOI) rule – It argues that arbitrary limits on the number of instances of a particular type of data or structure should not be allowed.
Abstraction principle – is a basic dictum that aims to reduce duplication of information in a program whenever practical by making use of abstractions provided by the programming language or software libraries.
Black box – is a system which can be viewed in terms of its inputs and outputs (or transfer characteristics), without any knowledge of its internal workings.
Code reuse – is the use of existing software, or software knowledge, to build new software,[1] following the reusability principles.
Cohesion – refers to the degree to which the elements inside a module belong together. 
Command–query separation – every method should either be a command that performs an action, or a query that returns data to the caller, but not both.
Composition over inheritance – is the principle that classes should achieve polymorphic behavior and code reuse by their composition rather than inheritance from a base or parent class.
Coupling – low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability.
Defensive programming – is a form of defensive design intended to ensure the continuing function of a piece of software under unforeseen circumstances.
Dependency inversion principle – High-level modules should not import anything from low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.
Deutsch limit – The problem with visual programming is that you can’t have more than 50 visual primitives on the screen at the same time.
Discoverability –  is the degree to which something, especially a piece of content or information, can be found in a search of a file, database, or other information system.
Don't repeat yourself – is a principle of software development aimed at reducing repetition of software patterns, replacing it with abstractions or using data normalization to avoid redundancy.
Fail-fast – a fail-fast system is one which immediately reports at its interface any condition that is likely to indicate a failure. 
Gall's law – A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work.
Information hiding – is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed.
Interface segregation principle – states that no code should be forced to depend on methods it does not use.
Inversion of control – inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework.
KISS principle – principle states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design, and unnecessary complexity should be avoided.
Law of Demeter – Each unit should have only limited knowledge about other units: only units "closely" related to the current unit.
Liskov substitution principle – a principle in object-oriented programming stating that an object (such as a class) and a sub-object (such as a class that extends the first class) must be interchangeable without breaking the program.
Loose coupling – a loosely coupled system is one in which components are weakly associated with each other, and so, changes in one component least affect existence or performance of another component.
Ninety–ninety rule – The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.
Offensive programming – offensive programming adds an explicit priority of not tolerating errors in wrong places.
Open–closed principle – software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.
Principle of least astonishment – It proposes that a component of a system should behave in a way that most users will expect it to behave.
Rule of three – It states that two instances of similar code do not require refactoring, but when similar code is used three times, it should be extracted into a new procedure.
Separation of concerns – Each section addresses a separate concern, a set of information that affects the code of a computer program.
Separation of mechanism and policy – It states that mechanisms should not dictate the policies according to which decisions are made about which operations to authorize, and which resources to allocate.
Single-responsibility principle – is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program's functionality, and it should encapsulate that part.
SOLID – is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible, and maintainable.
Uniform access principle – All services offered by a module should be available through a uniform notation, which does not betray whether they are implemented through storage or through computation.
Worse is better – Software quality does not necessarily increase with functionality: that there is a point where less functionality ("worse") is a preferable option ("better") in terms of practicality and usability.
You aren't gonna need it – s a principle which arose from extreme programming (XP) that states a programmer should not add functionality until deemed necessary.
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one– and preferably only one –obvious way to do it.[a]
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than right now.[b]
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea – let's do more of those!
Analysis paralysis: A project that has stalled in the analysis phase of development, and is unable to achieve support for any of the potential plans of its implementation
Bicycle shed: Giving disproportionate weight to trivial issues
Bleeding edge: Operating with cutting-edge technologies that are still untested or unstable, leading to cost overruns, under-performance or delayed delivery of the product
Bystander apathy: The phenomenon in which people are less likely to or do not offer help to a person in need when others are present
Cash cow: A profitable legacy product that often leads to complacency about new products
Design by committee: The result of having many contributors to a design, but no unifying vision
Escalation of commitment: Failing to revoke a decision when it proves wrong
Groupthink: A collective state where group members begin, often unknowingly, to think alike and reject differing viewpoints
Management by objectives (SAFe): Management operating with the exclusive focus on quantitative management criteria, such as number of sales, when these are non-essential or cost too much to acquire
Micromanagement: Ineffective results stemming from excessive observation, supervision, or other hands-on involvement from management
Moral hazard: Insulating a decision-maker from the consequences of their decision
Mushroom management: Keeping employees "in the dark and fed manure" (also "left to stew and finally canned") about decisions being taken by management
Peter principle: Continually promoting otherwise well-performing employees up to a position they are unsuited for, with responsibilities they are incompetent at completing, where they remain indefinitely
Seagull management: Management in which managers only interact with employees when a problem arises, when they "fly in, make a lot of noise, dump on everyone, do not solve the problem, then fly out"
Stovepipe or Silos: An organizational structure of isolated or semi-isolated teams, in which too many communications take place up and down the hierarchy, rather than directly with other teams across the organization
Typecasting: Locking successful employees into overly-safe, narrowly defined, predictable roles based on their past successes rather than their potential
Vendor lock-in: Making a system excessively dependent on an externally supplied component
Cart before the horse: Focusing too many resources on a stage of a project out of its sequence
Death march: A project whose staff, while expecting it to fail, are compelled to continue, often with much overwork, by management in denial of the project's possible failure.
Ninety-ninety rule: Tendency to underestimate the amount of time to complete a project when it is "nearly done"
Overengineering: Spending resources making a project more robust and complex than is needed
Scope creep: Uncontrolled changes or continuous growth in a project's scope, or adding new features to the project after the original requirements have been drafted and accepted (also known as requirement creep and feature creep)
Smoke and mirrors: Demonstrating unimplemented functions as if they were already implemented
Brooks's law: Adding more resources to a project to increase velocity, when the project is already slowed by coordination overhead
Gold plating: Continuing to work on a task or project well past the point at which extra effort is not adding value
Abstraction inversion: Not exposing implemented functionality required by callers of a function/method/constructor, so that the calling code awkwardly re-implements the same functionality in terms of those calls
Ambiguous viewpoint: Presenting a model (usually Object-oriented analysis and design (OOAD)) without specifying its viewpoint
Big ball of mud: A system with no recognizable structure
Database-as-IPC: Using a database as the message queue for routine interprocess communication where a much more lightweight mechanism would be suitable
Inner-platform effect: A system so customizable as to become a poor replica of the software development platform
Input kludge: Failing to specify and implement the handling of possibly invalid input
Interface bloat: Making an interface so powerful that it is extremely difficult to implement
Magic pushbutton: A form with no dynamic validation or input assistance, such as dropdowns
Race hazard (or race condition): Failing to see the consequences of events that can sometimes interfere with each other.
Stovepipe system: A barely maintainable assemblage of ill-related components
Anemic domain model: The use of the domain model without any business logic. The domain model's objects cannot guarantee their correctness at any moment, because their validation and mutation logic is placed somewhere outside (most likely in multiple places). Martin Fowler considers this to be an anti-pattern, but some disagree that it is always an anti-pattern.
Call super: Requiring subclasses to call a superclass's overridden method
Circle–ellipse problem: Subtyping variable-types on the basis of value-subtypes
Circular dependency: Introducing unnecessary direct or indirect mutual dependencies between objects or software modules
Constant interface: Using interfaces to define constants
God object: Concentrating too many functions in a single part of the design (class)
Object cesspool: Reusing objects whose state does not conform to the (possibly implicit) contract for re-use
Object orgy: Failing to properly encapsulate objects permitting unrestricted access to their internals
Poltergeists: Objects whose sole purpose is to pass information to another object
Sequential coupling: A class that requires its methods to be called in a particular order
Singleton Pattern: This design pattern brings coupling and is considered a bad solution
Yo-yo problem: A structure (e.g., of inheritance) that is hard to understand due to excessive fragmentation
Accidental complexity: Programming tasks that could be eliminated with better tools (as opposed to essential complexity inherent in the problem being solved)
Action at a distance: Unexpected interaction between widely separated parts of a system
Boat anchor: Retaining a part of a system that no longer has any use
Busy waiting: Consuming CPU while waiting for something to happen, usually by repeated checking instead of messaging
Caching failure: Forgetting to clear a cache that holds a negative result (error) after the error condition has been corrected
Cargo cult programming: Using patterns and methods without understanding why
Coding by exception: Adding new code to handle each special case as it is recognized
Error hiding: Catching an error message before it can be shown to the user and either showing nothing or showing a meaningless message. This anti-pattern is also named Diaper Pattern. Also can refer to erasing the Stack trace during exception handling, which can hamper debugging.
Hard code: Embedding assumptions about the environment of a system in its implementation
Lasagna code: Programs whose structure consists of too many layers of inheritance
Lava flow: Retaining undesirable (redundant or low-quality) code because removing it is too expensive or has unpredictable consequences
Loop-switch sequence: Encoding a set of sequential steps using a switch within a loop statement
Magic numbers: Including unexplained numbers in algorithms
Magic strings: Implementing presumably unlikely input scenarios, such as comparisons with very specific strings, to mask functionality.
Repeating yourself: Writing code that contains repetitive patterns and substrings over again; avoid with once and only once (abstraction principle)
Shooting the messenger: Throwing exceptions from the scope of a plugin or subscriber in response to legitimate input, especially when this causes the outer scope to fail.
Shotgun surgery: Developer adds features to an application codebase that span a multiplicity of implementors or implementations in a single change
Soft code: Storing business logic in configuration files rather than source code
Spaghetti code: Programs whose structure is barely comprehensible, especially because of misuse of code structures
Copy and paste programming: Copying (and modifying) existing code rather than creating generic solutions
Golden hammer: Assuming that a favorite solution is universally applicable
Invented here: The tendency towards dismissing any innovation or less than trivial solution originating from inside the organization, usually because of lack of confidence in the staff
Not invented here (NIH) syndrome: The tendency towards reinventing the wheel (failing to adopt an existing, adequate solution)
Premature optimization: Coding early-on for perceived efficiency, sacrificing good design, maintainability, and sometimes even real-world efficiency
Programming by permutation (or "programming by accident", or "programming by coincidence"): Trying to approach a solution by successively modifying the code to see if it works
Reinventing the square wheel: Failing to adopt an existing solution and instead adopting a custom solution that performs much worse than the existing one
Silver bullet: Assuming that a favorite technical solution can solve a larger process or problem
Tester-driven development: Software projects in which new requirements are specified in bug reports
Dependency hell: Problems with versions of required products
DLL hell: Inadequate management of dynamic-link libraries (DLLs), specifically on Microsoft Windows
Extension conflict: Problems with different extensions to classic Mac OS attempting to patch the same parts of the operating system
JAR hell: Overutilization of multiple JAR files, usually causing versioning and location problems because of misunderstanding of the Java class loading model
